# syntax=docker/dockerfile:1

# Specify the base Node.js image and define common configuration
ARG NODE_VERSION=lts
FROM node:${NODE_VERSION}-alpine as base
WORKDIR /usr/src/app
EXPOSE 4000

# Ensure the 'dist' directory exists and set permissions
RUN mkdir -p dist && chown -R node:node dist

# Development stage
FROM base as dev
#COPY --chown=node:node ../package*.json ./
COPY --chown=node:node . .
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev
USER node
CMD npm run start:dev

# Dependencies stage
FROM base as deps
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev

# Build stage
FROM deps as build
COPY --chown=node:node . .
RUN npm run build

# Production stage
FROM base as prod
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev
ENV NODE_ENV production
USER node
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY --from=build /usr/src/app/dist ./dist
CMD npm run start:prod
